{
  "baseUrl": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/",
  "dropdownLabel": "I have an object, I would like to: ",
  "defaultCode": "let obj = {\n  a: 1,\n  b: 2,\n  c: 3\n};",
  "options": {
    "create an object": {
      "dropdownLabel": "I need to:",
      "options": [
        {
          "name": "create",
          "shortDesc": "create a new object",
          "desc": "Creates a new object with the specified prototype object and properties.<br><br><strong>Important note for beginners!</strong> It's more common to create an object the way that it's shown at the top of the example, like this <code>let obj = { a: 1 };</code>",
          "example": "const obj2 = Object.create(obj);\nconsole.log(obj2);",
          "output": "Object {\n  a: 1,\n  b: 2,\n  c: 3\n}"
        },
        {
          "name": "assign",
          "shortDesc": "make a copy of an object",
          "desc": "Copies the values of all enumerable own properties from one or more source objects to a target object. It will return the target object. Though not technically a built in object method, it's more common when using ES6 to make use of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\">Spread Operator</a>, by using <code>...</code>",
          "example": "const copy = Object.assign({}, obj);\nconsole.log(copy);",
          "output": "Object {\n  a: 1,\n  b: 2,\n  c: 3\n}"
        }
      ]
    },
    "create properties": {
      "dropdownLabel": "I need to create:",
      "options": [
        {
          "name": "defineProperty",
          "shortDesc": "a new property or modify an existing one",
          "desc": "Adds the named property described by a given descriptor to an object.<br><br><strong>Important note for beginners!</strong> It's more common to use dot or square bracket notation to create a new property or modify an existing one. Like this: <code>obj.a = 1</code> or <code>obj[a] = 1</code>. This isn't technically a built-in method, that's why it's not included.",
          "example": "Object.defineProperty(obj, 'd', {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4\n});\n\nconsole.log(obj.d);",
          "output": "4"
        },
        {
          "name": "defineProperties",
          "shortDesc": "one or more properties or modify existing properties",
          "desc": "Adds one or more properties described by a given descriptor to an object.<br><br><strong>Important note for beginners!</strong> It's more common to use dot or square bracket notation to create a new property or modify an existing one. Like this: <code>obj.a = 1</code> or <code>obj[a] = 1</code>. This isn't technically a built-in method, that's why it's not included.",
          "example": "Object.defineProperties(obj, {\n  d: {\n    value: 4,\n    writable: true\n  },\n  e: {\n    value: 5,\n    writable: true\n  }\n});\n\nconsole.log(obj);",
          "output": "{a: 1, b: 2, c: 3, d: 4, e: 5}"
        }
      ]
    },
    "get information about an object": {
      "dropdownLabel": "I need to determine:",
      "options": [
        {
          "name": "isExtensible",
          "shortDesc": "if more properties can be added",
          "desc": "Determines if extending of an object is allowed.",
          "example": "console.log(Object.isExtensible(obj));\nObject.freeze(obj);\nconsole.log(Object.isExtensible(obj));",
          "output": "true\nfalse"
        },
        {
          "name": "is",
          "shortDesc": "if two references point to the same object",
          "desc": "Compares if two references point to the same object. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison). This one is a little weird, and the MDN docs are a bit misleading. It's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#When_to_use_Object.is_versus_triple_equals\" target=\"_blank\">more useful to use triple equals <code>===</code></a> to check equality",
          "example": "let obj2 = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nconsole.log(Object.is(obj, obj2));\nconsole.log(Object.is(obj, obj));",
          "output": "false\ntrue"
        },
        {
          "name": "isFrozen",
          "shortDesc": "if an object and its properties can't be modified",
          "desc": "Determines if an object is frozen",
          "example": "console.log(Object.isFrozen(obj));\nObject.freeze(obj);\nconsole.log(Object.isFrozen(obj));",
          "output": "false\ntrue"
        },
        {
          "name": "isSealed",
          "shortDesc": "if an object can't be modified (its properties can be, though)",
          "desc": "Determines if the descriptor of its properties can't be changed and new properties can't be created.",
          "example": "Object.seal(obj);\n\nconsole.log(Object.isSealed(obj));",
          "output": "true"
        }
      ]
    },
    "get information about property details": {
      "dropdownLabel": "I need to find out:",
      "options": [
        {
          "name": "getOwnPropertyDescriptor",
          "shortDesc": "details about a property",
          "desc": "Returns a property descriptor for a named property on an object",
          "example": "const o = Object.getOwnPropertyDescriptor(obj, 'a');\n\nconsole.log(o);",
          "output": "Object {\n  configurable: true,\n  enumerable: true,\n  value: 1,\n  writable: true\n}"
        },
        {
          "name": "getOwnPropertyDescriptors",
          "shortDesc": "details about all the properties on an object",
          "desc": "Returns an object containing all own property descriptors for an object",
          "example": "console.log(Object.getOwnPropertyDescriptors(obj))",
          "output": "Object {\n  a: Object {\n    configurable: true,\n    enumerable: true,\n    value: 1,\n    writable: true\n  },\n  b: Object {\n    configurable: true,\n    enumerable: true,\n    value: 2,\n    writable: true\n  },\n  c: Object {\n    configurable: true,\n    enumerable: true,\n    value: 3,\n    writable: true\n  },\n}"
        },
        {
          "name": "propertyIsEnumerable",
          "shortDesc": "if a property can be traversed with a for...in loop",
          "desc": "Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set. This can be used to see if something is a built-in or user-defined method because built-in properties tend to not be enumerable",
          "example": "console.log(obj.propertyIsEnumerable('a'));\nconsole.log(Math.propertyIsEnumerable('random'));",
          "output": "true\nfalse"
        },
        {
          "name": "hasOwnProperty",
          "shortDesc": "if a property exists as a direct property of the object",
          "desc": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain",
          "example": "console.log(obj.hasOwnProperty('a'));\ndelete obj.a;\nconsole.log(obj.hasOwnProperty('a'));",
          "output": "true\nfalse"
        }
      ]
    },
    "get list of property details like keys and/or values": {
      "dropdownLabel": "I need to get an array of all of the:",
      "options": [
        {
          "name": "getOwnPropertyDescriptor",
          "shortDesc": "details about a property",
          "desc": "Returns a property descriptor for a named property on an object",
          "example": "const o = Object.getOwnPropertyDescriptor(obj, 'a');<br><br>console.log(o);",
          "output": "Object {\n  configurable: true,\n  enumerable: true,\n  value: 1,\n  writable: true\n}"
        },
        {
          "name": "getOwnPropertyDescriptors",
          "shortDesc": "details about all the properties on an object",
          "desc": "Returns an object containing all own property descriptors for an object",
          "example": "console.log(Object.getOwnPropertyDescriptors(obj))",
          "output": "Object {\n  a: Object {\n    configurable: true,\n    enumerable: true,\n    value: 1,\n    writable: true\n  },\n  b: Object {\n    configurable: true,\n    enumerable: true,\n    value: 2,\n    writable: true\n  },\n  c: Object {\n    configurable: true,\n    enumerable: true,\n    value: 3,\n    writable: true\n  },\n}"
        },
        {
          "name": "propertyIsEnumerable",
          "shortDesc": "if a property can be traversed with a for...in loop",
          "desc": "Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set. This can be used to see if something is a built-in or user-defined method because built-in properties tend to not be enumerable",
          "example": "console.log(obj.propertyIsEnumerable('a'));\nconsole.log(Math.propertyIsEnumerable('random'));",
          "output": "true\nfalse"
        },
        {
          "name": "hasOwnProperty",
          "shortDesc": "if a property exists as a direct property of the object",
          "desc": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain",
          "example": "console.log(obj.hasOwnProperty('a'));\n delete obj.a;\nconsole.log(obj.hasOwnProperty('a'));",
          "output": "true\nfalse"
        }
      ]
    },
    "restrict changes to an object": {
      "dropdownLabel": "I need to:",
      "options": [
        {
          "name": "seal",
          "shortDesc": "make sure properties can't be added or deleted",
          "desc": "Prevents other code from deleting properties of an object. Existing properties can still be modified",
          "example": "Object.seal(obj);\ndelete obj.c;\n\nconsole.log(obj);",
          "output": "{a: 1, b: 2, c: 3} // obj.c doesn't get deleted"
        },
        {
          "name": "freeze",
          "shortDesc": "make sure properties can't be added, deleted, or modified",
          "desc": "Freezes an object: other code can't delete or change any properties.",
          "example": "Object.freeze(obj);\nobj.a = 10;\n\nconsole.log(obj.a);",
          "output": "1 // the value didn't update to 10"
        },
        {
          "name": "preventExtensions",
          "shortDesc": "make sure properties can't be added.",
          "desc": "Prevents any extensions of an object. I can still delete properties but can't add any new ones.",
          "example": "Object.preventExtensions(obj);\nobj.d = 4;\n\nconsole.log(obj.d);",
          "output": "undefined"
        }
      ]
    },
    "create string from an object": {
      "dropdownLabel": "I need to return a:",
      "options": [
        {
          "name": "toString",
          "shortDesc": "string representation of the object.",
          "desc": "The <code>toString()</code> method returns a string representing the object. Though this is the built-in method available, it's usually more useful to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\"><code>JSON.stringify()</code></a>",
          "example": "console.log(obj.toString());\nconsole.log(obj.a.toString());",
          "output": "\"[object Object]\"\n\"1\""
        },
        {
          "name": "toLocaleString",
          "shortDesc": "localized string representation of the object.",
          "desc": "The <code>toLocaleString()</code> method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes. In human terms: this means if you have something that has different data based on location, such as date methods, it will give you a different time format",
          "example": "obj.d = new Date();\n\nconsole.log(obj.d);\nconsole.log(obj.d.toLocaleString());",
          "output": "Fri Dec 29 2017 20:57:35 GMT-0700 (MST)\n12/29/2017, 8:57:35 PM"
        }
      ]
    }
  }
}
